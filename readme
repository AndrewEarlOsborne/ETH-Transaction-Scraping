# Ethereum Feature Extractor - VM Component

This is the minimal extraction code that runs on Google Cloud VMs. It's automatically deployed and configured by the orchestrator.

## What It Does

- Extracts Ethereum blockchain data for a specific time range
- Runs independently in a screen session
- Generates CSV files with transaction and validator data
- Reports status back to the orchestrator

## Files

- `extractor.py` - Main extraction script
- `requirements.txt` - Python dependencies
- `startup.sh` - VM initialization (used by orchestrator)

## How It Works

1. **Automatic Deployment**: The orchestrator deploys this code to VMs
2. **Auto-Configuration**: Each VM gets a unique `.env` file from the orchestrator
3. **Independent Extraction**: Runs until completion without external dependencies
4. **Data Output**: Creates CSV files that the orchestrator later collects

## Configuration (Set by Orchestrator)

The orchestrator automatically creates a `.env` file on each VM with:

```bash
# Ethereum provider (rotated across VMs)
ETHEREUM_PROVIDER_URL=https://eth.drpc.org

# Time range (unique per VM)
START_DATE=2021-01-01-00:00
END_DATE=2021-01-2-00:00

# Extraction parameters (from orchestrator config)
OBSERVATIONS_PER_INTERVAL=100      # How many blocks to sample per interval
PROVIDER_FETCH_DELAY_SECONDS=0.05  # Rate limiting delay
INTERVAL_SPAN_TYPE=hour              # day/hour/minute
INTERVAL_SPAN_LENGTH=1.0            # Length of each interval

# Output
DATA_DIRECTORY=data
```

## Output Files

### Transactions (`YYYYMMDD_HHMMSS_transactions.csv`)
Basic transaction data: hash, addresses, value, gas, etc.

### Validators/Blocks (`YYYYMMDD_HHMMSS_validator_transactions.csv`) 
Block-level data: timestamps, difficulty, gas usage, miner info, etc.

## Status Tracking

Creates `status.txt` for the orchestrator to monitor:
- `STARTED` → `RUNNING` → `COMPLETED` (or `FAILED`)

## Manual Testing (Optional)

If you want to test locally:

```bash
# Install dependencies
pip3 install -r requirements.txt

# Create test config
cat > .env << EOF
ETHEREUM_PROVIDER_URL=https://eth.drpc.org
START_DATE=2024-01-01-00:00
END_DATE=2024-01-01-01:00
OBSERVATIONS_PER_INTERVAL=10
DATA_DIRECTORY=data
EOF

# Run extraction
python3 extractor.py
```

## Integration

This repository works with the [Ethereum Extraction Orchestrator](https://github.com/andrewearlosborne/eth-extraction-orchestrator) which handles:
- VM deployment and time range distribution
- Configuration generation for each VM
- Result collection and aggregation
- Resource cleanup